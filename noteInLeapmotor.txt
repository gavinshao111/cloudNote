share folder: \\10.30.16.110\D-UserFiles
Z: ftp://10.26.201.100
connect to internet: 
	C:\Users\10256\AppData\Roaming\Microsoft\Workspaces\{19FFE2FD-0D78-4EF9-8B43-9F84E9763A43}\Resource\Google Chrome (Work Resources).rdp
初始密码: P@dahua2016
编译服务器 10.30.16.216 shao_guofeng shaoguofeng
alicloud shao_guofeng@120.27.188.84 shao_guofeng123 2798abc

panzhao: 172.17.4.9 / 192.168.43.201  (61.130.183.8)
    panzhao 111111

MQ Server in AliCloud: port: 8883, username: easydarwin, passwd: 123456


//设置 LD_LIBRARY_PATH 以载入共享库
export LD_LIBRARY_PATH="/home/panzhao/mqtt_client/mqtt.c/lib"


MqForEasyD:
g++ strlfunc.cpp mainProcess.cpp -fpic -shared -I ../mqtt.c/include/ -L ../mqtt.c/lib -lpaho-mqtt3c -DNO_PERSISTENCE=1 -o dist/Release/GNU-Linux/libMqForEasyD.so


部署 EasyDarwin:
1. 将mqtt头文件和lib放到EasyDarwin文件目录下，添加库文件目录到 LD_LIBRARY_PATH
2. 在项目->c++编译器包含目录中中添加mqtt头文件目录，
3. 在链接器其他库目录中添加qmqtt库所在目录，编译行其他选项中添加 -lpaho-mqtt3a -lpaho-mqtt3as -lpaho-mqtt3c -lpaho-mqtt3cs -DNO_PERSISTENCE=1 -lMqForEasyD
4. 写EasyDarwin源代码基础上写代码。

EasyDarwin 配置文件中的当前目录为启动easyDarwin的目录，若在x64下启动，则xml文件中的 . =.../x64/
./x64/easydarwin -c WinNTSupport/easydarwin.xml -d


编译 MyMQTTClient_...
g++ MQTTClient_subscribe.cpp -I ../EasyDarwin/mqtt.c/include/ -L ../EasyDarwin/mqtt.c/lib -lpaho-mqtt3a -lpaho-mqtt3as -lpaho-mqtt3c -lpaho-mqtt3cs -DNO_PERSISTENCE=1 -o subscribe






compile mqtt.c:
cd /home/panzhao/mqtt_client/EasyDarwin/mqtt.c/2ndbuild/
cmake -GNinja -DPAHO_WITH_SSL=1 -DCMAKE_BUILD_TYPE=Debug OPENSSL_INC_SEARCH_PATH="/home/panzhao/mqtt_client/openssl/include" OPENSSL_LIB_SEARCH_PATH=/home/panzhao/mqtt_client/openssl/lib /home/panzhao/mqtt_client/mqtt.c.sourceCode/paho.mqtt.c
ninja package

MQ 服务器 公钥 crt 转 pem:
openssl x509 -in mycert.crt -out mycert.pem -outform PEM

生成私钥:
openssl genrsa -des3 -out privkey.pem 2048




cd mqtt.c.sourceCode/paho.mqtt.c
make 生成 含SSL和可调试的库文件

 
Linux 相关操作:
开放端口: sudo iptables -I INPUT -p tcp --dport 8888 -j ACCEPT
du -h --max-depth=1 . 显示文件夹大小
tcpdump -i eth1 host 120.27.188.84 -w 14_51.cap




RTSPRequestStream.cpp:
	RTSPRequestStream::ReadRequest: 解析网路数据(OPTION)，解析到则发送MQ。
ReflectorSession.cpp:
	ReflectorSession::RemoveOutput: 判断Session内没有APP时发送StopPushMQ
QTSSReflectorModule.cpp:
	维护SessionMap，包括当有推流时创建Session，判断某Session是否存在。
OSRef.cpp & OSRef.h:
	SessionMap类，增加判断某Session是否存在的接口。
RTSPRequestInterface.cpp


同一个session中，若ED处理APP的option时堵塞，ED处理car的推流时也堵在ANNOUNCE，
因此若要加入条件变量通知机制，需要在ED检测到Car的OPTION时就发送通知。



ToDo:
1. 从panzhao拷过来的ffmTest不能用 done
2. 条件变量 当收到car的option是call notifyAppThePsuhIsArrived
3. Android tcp 无法播放
4. mqtt in SSL
5. parseReq 当收到这样的req时(rtsp://10.34.16.175:8888/testAfterHint.mp4), 解析失败

今天修复了 问题2 和5。在ubuntu上测试时，ED先处理App的option然后堵塞，期间ED会处理car的option announce，但是处理car的setup是在处理app的 option desc之后，这导致第一次必将失败。
回滚到 版本a 后还是一样，阿里云也是版本a 但是没这个问题。使用未经修改的ED也是这个问题。
之后将重新用centOS作为测试机。最新的代码版本已备份到分支 backup。
