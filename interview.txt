瀑布模型： 周期：制定计划、需求分析、软件设计、程序编写、软件测试和运行维护


数据库
索引：加快检索速度，但是增删改的时候需要维护成本。 索引就是通过事先排好序，从而在查找时可以应用二分查找等高效率的算法。
CREATE INDEX index_name
ON table_name (column_name)

授权语句
GRANT { { SELECT | INSERT | UPDATE | DELETE | REFERENCES | TRIGGER }
[,...] | ALL [ PRIVILEGES ] }
ON [ TABLE ] tablename [, ...]
TO { username | GROUP groupname | PUBLIC } [, ...] [ WITH GRANT OPTION ]

存储过程：
一、存储过程与函数的区别：

　　1.一般来说，存储过程实现的功能要复杂一点，而函数的实现的功能针对性比较强。

　　2.对于存储过程来说可以返回参数(output)，而函数只能返回值或者表对象。

　　3.存储过程一般是作为一个独立的部分来执行，而函数可以作为查询语句的一个部分来调用，由于函数可以返回一个表对象，因此它可以在查询语句中位于FROM关键字的后面。

二、存储过程的优点：

　　1.执行速度更快 – 在数据库中保存的存储过程语句都是编译过的

　　2.允许模块化程序设计 – 类似方法的复用

　　3.提高系统安全性 – 防止SQL注入

　　4.减少网络流通量 – 只要传输存储过程的名称
例子：
-------------创建名为usp_StudentByGenderAge的存储过程----------------

create proc usp_StudentByGenderAge

　　@gender nvarchar(10) [='男'],

　　@age int [=30]

　　as

　　select * from MyStudent where FGender=@gender and FAge=@age
-------------执行上面的存储过程----------------

exec usp_StudentByGenderAge '女',50

数据库事务特性：
原子性：
一致性：拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000
分离性：隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。
持久性：一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的

二叉树：
结构：
struct BinaryTreeNode
{
    int m_nValue;
    BinaryTreeNode* m_pLeft;
    BinaryTreeNode* m_pRight;
};

求节点个数
int GetNodeNum(BinaryTreeNode * pRoot)  
{  
    if(pRoot == NULL) // 递归出口  
        return 0;  
    return GetNodeNum(pRoot->m_pLeft) + GetNodeNum(pRoot->m_pRight) + 1;  
}

求深度
int GetDepth(BinaryTreeNode * pRoot)  
{  
    if(pRoot == NULL) // 递归出口  
        return 0;  
    int depthLeft = GetDepth(pRoot->m_pLeft);  
    int depthRight = GetDepth(pRoot->m_pRight);  
    return depthLeft > depthRight ? (depthLeft + 1) : (depthRight + 1);   
}

前序遍历
void PreOrderTraverse(BinaryTreeNode * pRoot)  
{  
    if(pRoot == NULL)  
        return;  
    cout << pRoot->m_nValue << endl; // 访问根节点 
    PreOrderTraverse(pRoot->m_pLeft); // 前序遍历左子树  
    PreOrderTraverse(pRoot->m_pRight); // 前序遍历右子树  
}
中序就是先遍历左子树，再打印根节点，再访问右子树
后序就是先遍历左子树，再访问右子树，再打印根节点

单例模式：
懒汉模式：用锁来保证线程安全，但是会影响性能。
class Singleton
{
private:
    static Singleton* m_instance;
    Singleton(){}
public:
    static Singleton* getInstance();
};

Singleton* Singleton::getInstance()
{
    if(NULL == m_instance)
    {
        Lock();//借用其它类来实现，如boost
        if(NULL == m_instance)
        {
            m_instance = new Singleton;
        }
        UnLock();
    }
    return m_instance;
}
饿汉模式：全局定义对象指针，保证只执行一遍
class A {
    A() : m_data(0) {};
    int m_data;
    static const A* m_instance;
public:
    static const A* getInstance() {
        return m_instance;
    }
    void print() const {cout << m_data << endl;}
};

const A* A::m_instance = new A;

会计相关：
恒等式：资产＝负债＋所有者权益＋（收入－费用）
报表打印内容：
unit, Market Price, Market Value, Accred interest, cost, book value, unrealised gain/loss, book yield
美国有很多会计标准，主要有 tax basis, 4th basis,STAT, gaap, management 等，然后算各种值的时候公式也不同，
也会涉及到货币汇率转换，投资组合持有量转换
SMF类型有普通普票，优先股，债券，Money Market，repo，swap，fix income


2020/3 同花顺 java
1. 比较难的问题，哪些能体现能力
2. 带领团队
3. arrayList linkedList 区别，优缺点，内部实现，适用情况
4. vm调优参数有哪些，你用过哪些；什么情况下触发gc；gc分哪几种；默认垃圾回收器
5. 如何不用第三个变量，交换两个变量值
6. 技术上遇到比较难的问题，举了物联网卡轮询死循环的例子。出异常如何处理。如何排查。对于线上问题，除了日志，有没有更好的方法来定位。  举了国标数据到处数据量过大导致OOM的例子，用jdk调试工具去找什么对象数量比较大。
7. 出现死循环问题会出现什么现象。出现问题隔了多久恢复。
8. 业务时间怎么利用，有没有整块整块的看过一本书。
9. 有没有遇到比较难沟通的人
10. AI应用
11. 同事间摩擦
12. 对新工作的期望，职业规划，离职原因
13. mysql 组合索引生效问题。对于数据量大的情况，除了索引还有什么优化方案


2020/3 网易 java
1. kafka消息怎么消费
2. ha proxy作用，地址映射是ha proxy还是nginx，如果haproxy挂了怎么办
    作用：负载均衡。使用 keepalived 监听 haproxy 节点是否挂机，挂了启用备份的 haproxy 节点，从而达到高可用
3. redis和MySQL写同一个数据如何保证一致性。一个数据既在redis又在MySQL，要更新时如何修改？如何一个修改失败怎么办？
    ·双删：
        1. 删除缓存
        2. 更新数据库
        3. 删除缓存（1、2之间可能有请求查询缓存，发现缓存不存在再请求数据库得到旧值，然后旧值又被写入缓存，所以这里把缓存删除，排除这种情况）
    ·订阅MySQL binlog，删除缓存；
4. MySQL查询优化，如何查看索引有没有用到
    使用EXPLAIN查看执行计划。
    type：这是重要的列，显示连接使用了何种类型。从最好到最差的连接类型为const、eq_reg、ref、range、index和ALL
    possible_keys：显示可能应用在这张表中的索引
    key： 实际使用的索引
    （使用USE INDEX（indexname）来强制使用一个索引）
5. HashMap如何实现的，红黑树是什么情况，删除时，节点个数少于8，怎么处理；数组如何扩容
    删除流程：
    1. 跟put类似，先对key哈希得到数组索引上的node，
    2. 判断key是否相同，相同则判断是否为树节点，是就调用删除树节点的方法
    3. 否则就是链表节点，然后遍历链表，找到key相同节点并删除，如果这个节点是头节点，当前数组索引上放这个链表下一个头节点

    扩容：
    1. 如果老数组不为空，说明是扩容操作，那么涉及到元素的转移操作，创建一个容量两倍的新数组
    2. 遍历老数组中节点不为空的节点，若头节点.next为空，则计算新余数作为索引后移到新数组
    3. 否则若为树节点，则调用split转移红黑树
    4. 否则是个链表，按hash值是否大于oldCap把所有节点链到两个不同的链表，小的那个放到新数组的索引不变，另一个的索引为当前索引+oldCap
     * 比如oldCap=4，二进制就是100，
     * 若hash < oldCap => hash第三位往左都是0 => 即使cap变为原来的两倍1000，取余不变
     * 若hash>old => hash第三位为1 => cap变为原来的两倍，取余=hash低2位|100，即原来的余数+oldCap


2020/3 阿里 java
1. 项目介绍，持续多久
2. why mqtt? 什么场景下，会做什么样的优化，qos
    ·这个轻量级协议可在严重受限的设备硬件和高延迟/带宽有限的网络上实现；使用发布和订阅模型，使得数据的发布者与使用者分离。
    ·1字节固定报头，2字节心跳报文，最小化传输开销和协议交换，有效减少网络流量。
    ·提供服务质量管理：
        qos（服务质量或 QoS）标志表明此主题范围内的消息传送到客户端所需的一致程度。
        值 0：不可靠，消息基本上仅传送一次，如果当时客户端不可用，则会丢失该消息。
        值 1：消息应传送至少 1 次。
        值 2：消息仅传送一次。
3. 车联网是什么？功能
4. 通信拓展性，模型拓展性
5. 如果有个第三方平台使用其他协议需要接入车辆数据，该如何尽量少动代码解决
6. 加密方式，rsa加密原理，非对称加密，对称加密和非对称在rsa中是同一个流程吗，考虑是什么
7. 双向认证
8. tcp 建立和断开，三次握手和四次挥手，期间客户端服务端状态变化过程，服务端大量处于time_out，如何解决？可以修改内核参数
9. netty为什么这么快？select epoll NIO 线程池 缓存减少拷贝
10. select poll epoll 区别与机制
    select 对于套接字采用轮询检查是否可读可写，有读写事件发生时，用户需要再轮询一遍哪些套接字有读写时间，而且监听套接字个数有上限。
    poll 与select类似，但是使用链表存储套接字，所有套接字个数没有上限
    epoll 1. 内部不用轮询，而使用回调函数的机制（等待系统通知哪个套接字有读写时间），降低cpu的同时，不会像select那样因为套接字个数增长而效导致率降低
          2. 只返回给用户有读写事件的套接字，用户不需要浪费时间轮询判断没有读写时间的套接字，进一步提高读写效率。
11. springboot 与spring区别，优势，sping boot与sprig could区别，核心注解
    Spring Cloud基于Spring Boot，为微服务体系开发中的架构问题，提供了一整套的解决方案——服务注册与发现，服务消费，服务保护与熔断，网关，分布式调用追踪，分布式配置管理等。


自我介绍需要提高，介绍技术栈

2020/3 同花顺 java
1. 项目技术难点，多少数据量，数据量大对系统有什么影响，数据写入频繁如何优化。10s一次，600条数据一次写入花多久，如何判断有效性。
2. 有没有遇到高并发，负载上面的问题
3. 换工作原因
4. 多字段模糊匹配
5. 找工作关心什么
6. 规划，哪方面技术
7. 有看什么书籍
8. gc机制