一、集合
  1. hash
    ·概念：一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。
    ·哈希冲突：不同输入得到相同输出。
      如何解决哈希冲突：
      ·使用链地址法（使用散列表）来链接拥有相同hash值的数据；
      ·使用2次扰动函数（hash函数）来降低哈希冲突的概率，使得数据分布更平均；
      ·引入红黑树进一步降低遍历的时间复杂度，使得遍历更快；

  2. Map
    ·类型：HashMap，LinkedHashMap，TreeMap。若不需要保持元素的顺序，用HashMap，若保持元素的插入顺序或者访问顺序，用LinkedHashMap，若需要按照键值排序，用TreeMap。
    ·HashMap：数组+链表+红黑树，k和v允许为空
        put(k,v)流程：
        1. 扩容数组，若数组为空
        2. 通过hash定位数组的索引坐标，如果坐标上没有node则创建新Node放入
        3. 否则即hash冲突，判断两个Node.key是否相同，相同则替换v
        4. 否则如果node是TreeNode（树型结构）则执行树添加操作。
        5. 否则就是链表Node，遍历此链表，找key相同的Node，找到则替换v，否则在最后插入Node
        6. 若当前链表元素个数超过8个，则转为红黑树

        扩容流程：
        1. 如果老数组不为空，说明是扩容操作，那么涉及到元素的转移操作，创建一个容量两倍的新数组
        2. 遍历老数组中节点不为空的节点，若头节点.next为空，则计算新哈希取模值作为索引后移到新数组
        3. 否则若为树节点，则调用split转移红黑树
        4. 否则是个链表，按hash值是否大于oldCap把所有节点链到两个不同的链表，小的那个放到新数组的索引不变，另一个的索引为当前索引+oldCap
         * 比如oldCap=4，二进制就是100，
         * 若hash < oldCap => hash左两位都是0 => 即使cap变为原来的两倍1000，取余不变
         * 若hash>old => hash第三位为1 => cap变为原来的两倍，取余=hash低2位|100，即原来的余数+oldCap


    ·ConcurrentHashMap：结构与HashMap类似，数组+链表+红黑树。抛弃了原有的Segment分段锁，而采用了CAS（确保node的一些操作的原子性）+synchronized来保证并发安全性
        put(k,v)流程：
        1、初始化数组（若没有初始化）
        2、通过hash定位数组的索引坐标，如果坐标上没有node则使用CAS进行添加（链表的头节点）
        3、否则检查到内部正在扩容，帮助扩容。
        4、否则使用synchronized锁住当前node（链表/红黑树的头节点）。如果是Node（链表结构）则执行链表的添加操作；如果是TreeNode（树型结构）则执行树添加操作。
        5、若当前链表元素个数超过8个，则转为红黑树
        6、如果添加成功就调用addCount（）方法统计size，并且检查是否需要扩容

    ·Hashtable：数组+链表实现，k和v都不允许空，通过唯一的锁（synchronized）实现线程安全
    ·CopyOnWrite集合：写时复制，线程安全，读写分离。内部在写入数据时先加锁，再复制集合，再插入数据，再替换旧集合。


二、 JVM相关

 1. 垃圾回收：

  a. 算法：
   按策略分：引用计数，标记-清除，复制，标记-整理
   按系统线程分：
    串行（暂停程序，单线程，适合单处理器，小数据量），-XX:+UseSerialGC
    并行（暂停线程， 多线程回收），-XX:+UseParallelGC
    并发（不暂停程序，运行时回收垃圾，会产生碎片问题），-XX:+UseConcMarkSweepGC

  b. 哪些对象会被回收：可达性算法，从程序运行的根节点出发，遍历整个对象引用，未被引用的，再经历两次标记，会回收

  c. 分代垃圾回收：因为不同的对象的生命周期是不一样的，采用分治的思想。
   ·年轻代：Eden区+s1(survivor)+s2。
   ·年老代：过小了，会造成内存碎片、高回收频率以及应用暂停；过大会使GC时间过长
   ·持久代（Permanent）：存放的是Java类的类信息
   GC时，存活对象流转流程：程序产生对象先在Eden区，Eden区满即会触发MinorGC
   1. MinorGC时，将Eden存活对象复制到s1，重复此循环；
   2. 当s1满时，s1存活对象（o1）复制到s2，Eden区存活对象(o2)复制到s2。此后Eden满时，都复制到s2，重复此循环
   3. 当s2满时，将o1复制到年老区，o2复制到s1区。重复1，2，3循环
   4. 当年老区满时，触发FullGC

  d. G1增量回收，将堆分成很多Region来进行内存管理。步骤：
    1、初始标记（它标记了从GC Root开始直接可达的对象）
    2、并发标记（从GC Roots开始对堆中对象进行可达性分析，找出存活对象）
    3、最终标记（标记那些在并发标记阶段发生变化的对象，将被回收）
    4、筛选回收（首先对各个Region的回收价值和成本进行排序，根据用户所期待的GC停顿时间指定回收计划，回收一部分Region）

 2. 调优
  a. 参数：
   ·-Xms:初始堆大小
   ·-Xmx:最大堆大小
   ·-XX:NewRatio=n:设置年轻代和年老代的比值
   ·-Xmn:年轻代大小
   ·-XX:SurvivorRatio：新生代中Eden区域与Survivor区域的容量比值，默认值为8
   ·-Xss:分配给单个线程的空间
   ·-XX:PermSize：设置永久代(perm gen)初始值
   ·-XX:MaxPermSize：设置持久代最大值
  b. 策略：减少GC的频率和Full GC的次数

 3. JVM内存管理
  ·程序寄存器，Program Counter Register
  ·Java虚拟机栈
  ·堆
  ·方法区（永久代），之后将被元数据区（Metaspace）替代
  ·常量池
  ·本地方法栈，与Java虚拟机栈类似

 4. 类加载
  a. 过程： vm把class文件加载到内存，对数据校验，转换，解析，初始化。
   ·加载load：将字节码数据从不同的数据源（class文件，jar包，网络等）读取到JVM中，并转换为运行时数据（静态变量和代码块，常量池等）
   ·链接link：将Java类的二进制代码合并到JVM的运行状态中，分为验证（验证字节码是否符合规范），准备（为静态变量分配内存并设置初始值），解析（将常量池的符号引用替换为直接引用）
   ·初始化initialize：运行静态变量和静态初始化块代码

  b. 类加载器
   ·启动（Bootstrap）：将<Java_Runtime_Home>/lib下面的类库加载进来。用户不可用
   ·标准扩展（Extension）：将<Java_Runtime_Home>/lib/ext中的类库加载进来。可用
   ·系统（System）：将ClassPath中的类库加载进来。可用
   ·用户自定义：在运行时，通过java.lang.ClassLoader的子类动态加载class文件
   ·线程上下文类加载器

  c. 双亲委派
   ·定义：当某个ClassLoader需要加载类时，先委托父类加载器（parent classloader，若不存在，则默认使用启动类加载器作为父类加载器）完成，若无法加载再自己去加载
   ·原因：比如要加载java.lang.Object，若由不同的classloader自行加载，则加载后的类不是同一个类（比如用户编写同名类放在classpath中），因此将类加载任务往上抛给顶层classloader（启动类加载器），加载出来的类是相同的。
   ·模型（各个类加载器层级关系，Composition组合）：User -> System -> Extension -> Bootstrap

 5. volatile：类型修饰符，确保本条指令不会因编译器的优化而省略

 6. 常见问题
  ·StackOverflowError：递归没返回，或者循环调用
  ·OutOfMemoryError：由于反射过多使用，导致持久代满；线程过多；内存泄漏；参数设置不合理


name code 拼音简称 市场

三、SpringBoot

 ·优点：约定大于配置
  1. 简化配置：无需 XML 配置文件，能自动扫描包路径装载并注入对象，并能做到根据 classpath 下的 jar 包自动配置；启动器(starter)自动依赖其他组件，简少了maven的配置
  2. 独立运行（内嵌容器），
  3. 应用监控（引入spring-boot-starter-actuator，访问/health查看健康状态）

 ·基本工作原理：启动时，按约定读取各个Starter的配置信息，对资源进行初始化，并注入到Spring容器中。这样容器启动后，就已经准备好了一切资源，直接注入对应Bean即可使用

 ·自动配置原理：添加@SpringBootApplication或者@EnableAutoConfiguration，会自动去maven读取starter中的配置信息（META-INF/spring.factories），该文件包含了所有需要的bean

 ·三个核心注解：
  1.@Configuration：实现配置文件的功能，代替applicationContext.xml，@Bean代替XML配置文件里面的<bean ...>
  2.@EnableAutoConfiguration：打开自动配置的功能，它能根据包路径下的 jar 包和配置动态加载配置和注入bean
  3.@ComponentScan：组件扫描。开启后会自动扫描包路径下的@Component注解的bean实例到context中
  @SpringBootApplication包含了以上三个注解。

 ·常见问题
  1. 跨域：HTTP请求时必须遵守同源策略，否则就是跨域。解决方案：前后端分离的框架下，前端使用nodejs中转请求地址；controller上加@CrossOrigin


四、设计模式
  ·构造器模式：
    某个类所有字段不可更改，所以设为final，则必须在构造函数赋值，但部分字段可以使用默认值，即构造时可不必传值，此时只能定义多个构造函数：
    public class A {
        private final int a; // 必须
        private final int b; // 可选
        private final int c; // 可选

        public A(int a, int b, int c) {...}
        public A(int a, int b) {...}
        public A(int a, int c) {...} // 与上个构造函数矛盾
        public A(int a) {...}
    }
    当属性比较多时，不仅写起来麻烦，而且若出现同类型的可选字段，将无法重载。因此可以定义一个内部静态类，用来构造A
    public static class Builder {
        private final int a; // 必须
        private int b; // 可选
        private int c; // 可选

        public Builder(int a) {this.a = a;}
        public Builder b(int b) {this.b = b;return this;}
        public Builder c(int c) {this.c = c;return this;}
        public A build() {return new A(this);}
    }
    在使用时：
        A i = new A.Builder(1).b(9).build();
        A i1 = new A.Builder(1).build();
        A i2 = new A.Builder(1).c(2).build();
    除了必须的属性a，可以自由设置属性b或c，同时A不用写很多构造函数。

  ·工厂模式：定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，这样可使其创建过程延迟到子类进行
  ·单例模式：
  ·代理模式：结构型模式，一个类代表另一个类的功能，若直接访问会给使用者或者系统结构带来很多麻烦，在访问此对象时加上一个对此对象的访问层（代理）。如hibernate
  ·策略：？ 行为型模式，将不同的算法分别封装，避免使用多重条件判断
  ·外观：向现有的系统添加一个接口，来隐藏系统的复杂性
  ·桥接：抽象化与实现化解耦
  ·观察者：当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知它的依赖对象


五、数据库
    1. MySQL
     ·分区
      ·好处：可以存放更多数据，因为分开保存在不同文件里；删除数据更快，比如按时间分区，想删除早期数据，可通过删除分区来实现；涉及聚合函数SUM()、COUNT()的查询时，每个分区并行执行。
      ·注意点：如果表中存在主键或唯一索引时，只能使用主键/唯一键字段中的字段分区
      ·分区类型：
       ·RANGE：按取值范围分；
       ·LIST：与RANGE分区类似，区别在于LIST分区基于枚举出的值列表分区
       ·HASH：基于给定的分区个数，只能对整数分区，允许使用表达式。通过对哈希函数值取模让数据平均分布。由于建表时分区固定，新增或收缩分区时数据迁移较大。
       ·LINEAR HASH：使用一个线性的2的幂（powers-of-two）运算法则。增加、删除、合并和拆分分区比Hash分区快，有利于处理数据量的表，但分布不均衡
       ·KEY：类似HASH分区。不允许使用表达式，可以对字符串字段分区

     ·分表分库分片：可以减少IO操作；增加查询速度。
      ·垂直分割：按列分，把一张列比较多的表拆分为多张表。 垂直分割一般用于拆分大字段和访问频率低的字段，分离冷热数据
      ·水平分割：按行分。避免单一表数据量过大对性能造成影响
       1. 根据数值范围分片，如按id或时间分。易拓展，大小可控，易查询，但热点数据会成为性能瓶颈，比如按时间分，会频繁查询最近数据，历史数据很少查询。
       2. 根据数据取模分片，如根据id尾号分为10片，均匀分布。不易出现热点和性能瓶颈，但扩容迁移旧数据不方便，面临分片查询的复杂问题，比如查询条件没有包含id

     ·事务隔离
      ·基本要素
       1. 原子性
       2. 一致性：数据库的完整性约束不能被破坏，比如A转账给B，A扣了钱，B账上也必须增加。
       3. 隔离性：同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。
       4. 持久性：事务完成后，更新将被保留，不能回滚。

      ·并发问题：脏读（回滚前后读取数据差异），不可重复读（多次读取中，数据被更新，导致多次读取结果不同，针对行），幻读（全表修改时，另一个事务插入新数据）

      ·隔离级别
       1. 读未提交read-uncommitted：     A事务期间，能立即获取到B事务期间对数据的修改，B回滚也会对A造成影响（脏读）
       2. 读已提交read-committed：       A事务期间，能获取到B事务提交后对数据的修改（重复读，幻读）
       3. 可重复读（repeatable-read）：  A事务期间，B对数据的修改在A提交后才能获取到，若A修改数据则能立即获取到B的修改，比如B新增了一条记录，A修改所有记录，会发现Rows matched多一条（幻读）
       4. 串行化（serializable）：锁表

     ·索引：加快检索速度，但是增删改的时候需要维护成本。通过事先排好序，从而在查找时可以应用二分查找等高效率的算法。
      ·组合索引最左前缀原则：where子句中，某个有索引的字段未使用索引（包括未出现在where字句中）或使用范围条件后，按创建组合索引时各个索引排序，该字段后面（右侧）的有索引的字段无法再使用索引。
       如create index idx_test_c1234 on test(c1,c2,c3,c4)，where c1='a' and c4='a' and c2>'a' and c3='a'; 其中c3虽然是索引字段，虽然c4在where中排在c2前面，但是c2使用了范围条件，因此c3c4上的索引都失效
      ·explain中extra：
        1. filesort：排序时无法使用索引
        2. temporary：产生临时表
        以下为optional
        3. index：覆盖索引（select id form t where id=1）
        4. where：查找使用索引时，需要回表查询所需数据
        5. index condition：查找使用索引后，再次使用非索引条件，如a为索引，b非索引，where a=1 and b=2;
      ·主键索引与非主键索引区别：非主键索引的叶子节点存放的是主键的值，先查到主键值，然后再根据主键值查询到整行数据

    2. redis
      ·持久化：RDB：定期保存快照到磁盘中；AOF：保存所有写命令到文件，重启时重新执行写命令重建数据。
      ·过期清除策略：定期清除：每隔100ms随机检查一些key是否过期；惰性删除：在用户访问时检查是否过期
      ·缓存淘汰：当实际内存超限时，提供的淘汰策略
        默认no eviction（禁止驱逐数据，只允许读），针对设有过期时间的：volatile-lru（最近使用距今最远），volatile-ttl（寿命最短），volatile-random（随机淘汰），针对所有的：allkeys-lru，allkeys-random
      ·分布式锁：使用setnx命令，只当key不存在时成功，设置过期时间以防止死锁；基于redission自带可重入锁
      ·集群方案：
         a. 主从：主从复制不会阻塞master，slave为只读
         b. cluster：把n个槽（slot）分摊给m个node，根据key进行散列（hash），分配到slot中。当某个node挂了，需要重新分摊slot，其中的key也要迁移。解决：每个node可以再搭主从结构，当master挂了选举一个slave顶上，提高cluster可用性。比普通的主从方案提高了IO并发能力。
         c. codis/twemproxy：处于客户端和服务器的中间，将客户端发来的请求，进行一定的处理后(如sharding)，再转发给后端真正的Redis服务器
      ·redis和MySQL写同一个数据如何保证一致性。一个数据既在redis又在MySQL，要更新时如何修改？如何一个修改失败怎么办？
        ·双删：更新MySQL前后都删除缓存。删缓存和更新MySQL之间可能有请求查询缓存，发现缓存不存在再请求数据库得到旧值，然后旧值又被写入缓存，所以更新后再次缓存删除，排除这种情况
        ·订阅MySQL binlog，删除缓存；
      ·常见问题
        ·缓存雪崩：大量key同时失效，去请求后面的RMDB，导致RMDB瞬时访问量巨大导致崩溃。解决：避免大量key同时失效，选择合适的缓存淘汰策略；使用持久化机制恢复数据。
        ·缓存击穿：大量用户同时请求一个redis中没有（过期）的数据，导致RMDB瞬时访问量巨大导致崩溃。解决：对redis不存在而需要去RMDB查询的key加锁，获取锁后再从缓存查询。
        ·缓存穿透：蓄意高频请求不存在的数据，导致数据库资源被占满而崩溃。解决：对用户鉴权；对key进行业务合理性检验；若RMDB也没查到数据，则将空值写入缓存，并设置短时过期，这样在过期前高频攻击请求也不会去RMDB请求，减少其压力。
        ·一致性hash：因为普通的集群方案，对key哈希函取模让key平均分布在各个node上，当node新增时，需要重新分配，因此使用一致性hash方案：
          a. 先构造一个长度为2^32的整数环（一致性Hash环），根据node名称的Hash值（[0, 2^32-1]），将n个node放置在这个Hash环上，将环划分成n段
          b. 然后计算某个key的hash（[0, 232-1]），放在环上，顺时针查找下个node，并映射。
          c. 当增加node时，只会影响某一段环上的部分key映射。
        ·同一个项目可以通过redis直接插入/获取类对象，不同的项目由于类不同，无法直接将redis中其他项目的类对象转化为当前类对象。比如日志消费写入故障类实例，carmonitor即使使用完全相同的故障类，也无法将redis中的实例反序列化为自己的实例。需要转化为json字符串。

    3. MongoDB：更类似 MySQL，支持字段索引、游标操作，其优势在于查询功能比较强大，擅长查询 JSON 数据，能存储海量数据，但是不支持事务。数据存在内存，由linux系统mmap实现

    4. kafka：一条消息会分发给所有的消费组，在消费组内部分发给某个消费者；offset代表消费进度


六、网络协议
  1. tcp
    ·OSI七层模型：物理层->数据链路层->网络层->传输层->会话层->表示层->应用层
    ·c/s在四次挥手过程中的状态变化过程：
        c/s挥手前都是established
        1. c发出FIN后 -> FIN-WAIT-1
        2. s收到FIN后发出ACK -> CLOSE-WAIT
        3. c收到后 -> FIN-WAIT-2
        4. s发送FIN -> LAST-ACK
        5. c收到后发出ACK -> TIME-WAIT，等待2MSL段时间后 -> closed
        6. s -> closed
        为什么第5步c发出ACK后还要等待一段时间再CLOSED？因为ACK可能会丢，s没收到ACK就会在这段时间内重发FIN，所以c需要在这段时间内等s重发FIN再重发ACK并重新等，没有就默认s收到了。
        等待时间可以在内核参数中修改。

  2. http
    ·状态码：200 成功，400 客户端语法错误，403 服务端拒绝服务，404 url错误，500 服务端错误
    ·请求报文组成：请求行（HTTP协议版本号，状态码，状态消息）、请求头部、空行和请求数据
    ·cookie：当浏览网站时，由Web服务器置于你硬盘上的一个非常小的文本文件，它可以记录你的用户ID、密码、浏览过的网页、停留的时间等信息
  3. ssl:
    ·认证原理：c生成随机码，使用s提供的公钥加密后发给s，s使用私钥解密后获取到c的随机码，之后通过此随机码对称加密/解密内容。
    ·证书及双向认证流程：
        s去知名机构申请颁发CA，或自己制作根CA。若自己颁发CA，c需要提前从s下载根CA用来验证后来s的CA是否有效。s给c颁发CA用来后续认证c
        1. c建立连接，发送SSL版本等
        2. s发送服务端证书和公钥
        3. c基于之前本地已存在的根CA验证s的CA，验证通过即认为s可信；然后发送自己的CA和公钥给s
        4. s基于根CA对c的CA验证，通过即认为c可信
        5. s将加密方案使用c的公钥加密后发给c
        6. c用私钥解密得到加密方案，再生成随机码作为之后通信的对称加密密钥，使用s的公钥加密后发给s
        7. s使用私钥解密得到随机码，然后双方使用随机码作为对称加密密钥对数据加解密后通信

七、NIO
  1. netty
    ·server端流程：
      a. new两个EventLoopGroup分别用来处理连接事件和已连接的读写事件，他们实际是两个独立的Reactor线程池
      b. new ServerBootstrap启动NIO服务的辅助启动类，并使用上面两个group初始化，并设置事件（连接事件，读事件）到达时如何处理的handler
      c. ServerBootstrap绑定端口，阻塞等待关闭
      d. 关闭后释放所有资源


八、项目中遇到的问题：
    1. 在月初/底查询流量时，需要统计当月充值流量，由于数据库中时间与运行环境时间不一致，导致统计得到的当月充值流量错误。比如在8月1号1点查询当月充值流量，使用数据库内置函数curdate()可能会返回7月31号19点，这样查询出来的充值流量将为7月充值流量，产生bug。

！  2. 流量充值后，流量从负变为正，支付宝Api充值回调中需要调易达通恢复上网接口，支付宝回调返回超时，会重复调用产生业务bug。	易达通相关接口为耗时操作，导致支付宝支付回调超时。	在充值回调中起线程完成业务操作，使立刻充值回调立刻返回。

    3. 频繁切换使用涉及到国标数据库与车联网数据库的功能，即频繁切换数据源，会出现选择错误的数据库/源，导致接口报错	接口未正确使用MyBatisPlus那套选择数据源的方法	接口正确使用MyBatisPlus那套选择数据源的方法	明确项目数据库框架是MyBatis还是MyBatsisPlus；减少使用MyBatsisPlus

    4. 47.98.47.77服务器CPU达到100%，carmonitor服务CPU使用率达到最高，一直处于100%状态	carmonitor服务使用内存512M过小，导致GC过于频繁，CPU达到了100%	设置carmonitor的内存大小为1G

    5. 零云平台无法使用，同时日志打印内存溢出	国标数据导出多次请求数据量过大，在导出期间内存无法释放，从而导致服务停止	优化数据导出，变边查询边导出

    6. 车机下载OTA升级包，中控断开所有网络，零云平台显示下载完成，下载链接未断开	nginx代理配置不正确，配置有缓存，车机断开下载链接后，服务器写数据全部写到nginx缓存，当缓存写满之后就写到了临时文件里。	修改nginx配置，修改nginx里location->proxy_buffering off。此配置关闭此location的代理缓存

    7. 测试及项目反映部分车辆从2月16日后没有行程数据，故障信息及整车日志	存在部分kafka分区数据未消费的情况，重启后能重新消费;根本原因还待分析。
       可能原因分析：kafka异步通知消息到达，调用业务逻辑消费数据，但是业务逻辑存在阻塞，线程无法返回，无法继续消费。
       排查方法：在逻辑中加定时器，检查超时，超时时打印业务日志，如开始时间，分区，偏移量，堆栈等可以定位阻塞点的数据。

    8. 测试环境上传途记视频失败，接口返回413错误	nginx代理默认配置不正确，途记视频文件大小超过nginx对于文件大小的限制。	修改nginx配置，修改nginx里nginx.ingress.kubernetes.io/proxy-body-size项的值超过视频文件大小。
    9. EasyDarwin出现大量close_wait。close_wait是tcp挥手中，s收到c的第一次挥手FIN后，第二次挥手应答ACK后的状态，在s发送第三次挥手FIN后会切换为last-ack。
        出现大量close wait说明s没有收到c的关闭请求后始终没有关闭socket，可能是代码遗漏，可能是线程挂了。

九、故障排查
  ·业务日志
  ·htop查看cpu、内存使用情况
  ·使用jdk提供的Visual VM查看资源使用情况，包括类型，数量，内存占用大小等
  ·本地调试


引用：
JVM调优总结 https://www.cnblogs.com/andy-zhou/p/5327288.html
几率大的JVM面试题（含答案） https://blog.csdn.net/Butterfly_resting/article/details/89705057

SpringBoot常见面试问题 https://blog.csdn.net/zhoushimiao1990/article/details/99713372
Spring Boot 面试，一个问题就干趴下了！ https://zhuanlan.zhihu.com/p/61028032
spring boot 面试题详解 https://www.cnblogs.com/lingboweifu/p/11797926.html

MySQL中的分区是什么？为什么要分区？有什么好处？怎么进行分区？ https://blog.csdn.net/jiang7701037/article/details/81839899
MySQL性能优化(五)：分表 https://blog.csdn.net/vbirdbest/article/details/81084182
数据库分库分表思路 https://www.cnblogs.com/butterfly100/p/9034281.html
MySQL 四种事务隔离级的说明 https://www.cnblogs.com/zhoujinyi/p/3437475.html
MySQL高级知识（七）——索引面试题分析 https://www.cnblogs.com/developer_chan/p/9223671.html 出现部分错误
分享几道关于MySQL索引的重点面试题 https://www.jb51.net/article/161520.htm
Java类加载器与双亲委派模式的详解 https://blog.csdn.net/weixin_38055381/article/details/81382115
常用的几种java集合类总结 https://blog.csdn.net/gejiangbo222/article/details/81540616
面试必备：HashMap、Hashtable、ConcurrentHashMap的原理与区别 https://www.cnblogs.com/heyonggang/p/9112731.html
Java集合必会14问（精选面试题整理） https://www.jianshu.com/p/939b8a672070
Java的ConcurrentHashMap https://www.jianshu.com/p/5dbaa6707017

redis缓存淘汰策略 https://www.cnblogs.com/RitualYang/p/12219360.html
Redis面试题总结 https://www.jianshu.com/p/65765dd10671
缓存穿透、缓存击穿、缓存雪崩区别和解决方案 https://blog.csdn.net/kongtiao5/article/details/82771694
分布式锁之Redis实现 https://www.jianshu.com/p/47fd7f86c848
几率大的Redis面试题（含答案） https://blog.csdn.net/Butterfly_resting/article/details/89668661
redis常用集群方案 https://www.jianshu.com/p/1ecbd1a88924
对一致性Hash算法，Java代码实现的深入研究 https://www.cnblogs.com/xrq730/p/5186728.html

Java面试之http知识点（必问） https://www.cnblogs.com/it-tsz/p/11408668.html
干货 | 图解 https 单向认证和双向认证！ https://blog.csdn.net/superviser3000/article/details/80812263
SSL双向认证以及证书的制作和使用 https://www.cnblogs.com/bekoma/p/4053000.html
SSL/TLS 双向认证(一) -- SSL/TLS工作原理 https://blog.csdn.net/ustccw/article/details/76691248
TCP四次挥手时的TIME_WAIT状态 https://blog.csdn.net/tuobicui6522/article/details/80379428


 1. 集合，并发集合，集合原理 done
 2. jvm，gc 类加载器，双亲委派，done
 3. SpringBoot done
 4. sql 索引，优化，分库分表，事务隔离 done
 5. kafka，redis mongo 区别，redis单节点故障如何处理，缓存淘汰，一致性hash done
 6. http基础 done
 7. 故障排查 done
 8. 项目难点，如何解决 done
 9. nio netty done
 10. 设计模式：构造器模式 done
 11. 数据结构：tree
 12. 个人优势：nio编程模型

to learn:
hive hadoop map reduce 实时流计算 storm netty

